🏏 Cricket Player Run Predictor
A machine learning project designed to predict the number of runs a batsman is likely to score in a cricket match. This tool leverages key performance metrics like player rating, balls faced, and strike rate, offering a data-driven approach to simulate match scenarios and evaluate player impact.

📌 Project Features
Accurate Run Prediction: Predicts expected runs scored by a player using their historical performance features.
Model Comparison: Implements and compares various regression models, including Linear, Lasso, and Random Forest, to find the optimal predictive solution.
Comprehensive Data Pipeline: Covers essential data cleaning, robust feature engineering, and insightful Exploratory Data Analysis (EDA).
Interactive Web Application: Features a Flask web app for real-time predictions via a user-friendly browser interface.
Model Persistence: Uses pickle to efficiently serialize and load the trained machine learning model for deployment.
🧰 Tech Stack & Libraries
Language: Python 3.8+
IDE: Jupyter Notebook, VS Code
Core Libraries: pandas, numpy, scikit-learn
Visualization: matplotlib, seaborn
Web Framework & Persistence: flask, pickle
Tools: Jupyter Notebook (for model development), Flask (for web deployment)
📁 Project Structure
ds_cricket_project/
│
├── data/
│   └── final_data.csv             # Cleaned dataset used for training
│
├── model/
│   └── model_file.p               # Serialized Random Forest model (best performer)
│
├── notebooks/
│   └── model_training.ipynb       # All EDA, preprocessing, and model training
│
├── FlaskAPI/
│   ├── app.py                     # Flask web application code
│   └── templates/
│       └── home.html              # HTML page for user input form
│
├── requirements.txt               # Python project dependencies
└── README.md                      # Project documentation
📊 Dataset Description
This project utilizes a manually created and meticulously cleaned cricket dataset, comprising the following key features:

Rating: Player's overall performance rating.
Balls Faced: Number of balls faced by the player in an innings.
SR (Strike Rate): Player's strike rate, indicating scoring pace.
Runs: The target variable – the total runs scored by the player.
🔍 Model Building & Performance
Algorithms Explored:
Linear Regression – Served as the foundational baseline model.
Lasso Regression – An L1-regularized model, particularly effective for feature selection and handling sparse data.
Random Forest Regressor – Emerged as the best-performing model due to its robustness and accuracy.
Performance Summary (Mean Absolute Error - MAE):
The Mean Absolute Error (MAE) indicates the average magnitude of the errors in a set of predictions, without considering their direction.

Random Forest: 8.21 (Achieved the lowest error, indicating superior prediction accuracy)
Linear Regression: 10.55
Lasso Regression: 9.89
🧪 EDA Highlights
Identified a strong positive correlation between player rating, strike rate, and the runs scored.
Utilized scatter plots and heatmaps for effective visualization of trends and relationships within the dataset.
Concluded that player rating and strike rate are the most influential predictors of runs scored.
🚀 Deployment (Flask Web App)
The prediction model is seamlessly integrated into a lightweight Flask web application, allowing for quick and accessible run predictions.

How It Works:
The user inputs:
Player Rating
Balls Faced
Strike Rate
The trained machine learning model processes these inputs.
The web app instantly returns the predicted run value.
Example Interaction:
# Example Input:
Rating: 4.2
Balls Faced: 28
Strike Rate: 135

# Example Output:
Predicted Runs: 33.8
⚙️ How to Run Locally
Follow these steps to set up and run the Cricket Player Run Predictor on your local machine:

Bash

# Step 1: Clone the repository
git clone https://github.com/AyushNagras-07/ds_cricket_project.git
cd ds_cricket_project

# Step 2: Create and activate a virtual environment (recommended)
python -m venv venv
source venv/bin/activate       # On Windows, use: `venv\Scripts\activate`

# Step 3: Install project dependencies
pip install -r requirements.txt

# Step 4: Run the Flask web application
cd FlaskAPI
python app.py

# Step 5: Access the web app in your browser
# 👉 Visit: http://127.0.0.1:5000/
🙌 Acknowledgements
This project is inspired by the dynamic world of real-world cricket analytics and the practical applications of machine learning model deployment.

References:
scikit-learn Documentation
Flask Documentation
Manual data engineering and project inspiration derived from in-depth cricket statistics analysis.
📬 Contact
Feel free to fork this repository, open issues, or reach out for collaborations!

Author: Ayush Nagras
GitHub: AyushNagras-07
Key changes and why:
Introduction Refinement: Made the opening paragraph slightly more dynamic and benefit-oriented.
"Project Features" Clarity: Rephrased bullet points to be more action-oriented and clear about what each feature does. Bolded key outcomes like "runs scored" and "Flask web app".
"Tech Stack" & "Libraries" Formatting: Cleaned up the formatting for better readability.
"Project Structure" Comments: Added brief comments to the file paths to explain their purpose.
"Model Building & Performance" Detail: Added a short explanation for MAE, as not everyone might be familiar with it, and highlighted why Random Forest was the best.
"Deployment" Flow: Added a short "How It Works" section for better context.
"How to Run Locally" Instructions: Added comments to each command for clearer understanding.
Minor Wording Tweaks: Improved flow, grammar, and professionalism throughout.
Consistent Bold usage: Used bolding consistently for keywords and emphasis.
